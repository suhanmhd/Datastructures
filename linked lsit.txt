/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<cstdlib>

using namespace std;
struct node{
    
    int data;
    struct node *link;
};
struct node *root=NULL;

void append(){
    
struct node *temp;
temp=(struct node*)malloc(sizeof(struct node));
printf("\n Enter the element:\n");
scanf("%d",&temp->data);


if(root==NULL){
 
  root=temp;
  
}
else{
    struct node *p;
    p=root;
    while(p->link!=NULL){
        p=p->link;
    }
    p->link=temp;
}
}

void display(){
    
    struct node *p;
    p=root;
    
    if(p==NULL){
        printf("The List is Empty:\n");
    }
    
    else{
        while(p!=NULL){
            printf("%d-->",p->data);
            p=p->link;
        }
    }
}


int length(){
    int count=0;
    
    struct node*p;
    p=root;
    
    if(p==NULL){
        printf(" No Elements in the list:");
        
    }
    else{
        while(p!=NULL){
            p=p->link;
            count++;
        }
       return count;
    }      
        
}


void appendatpos(){
    int pos,len;
    struct node * temp,*p=root;
    len=length();
    printf("Enter the positon to insert the Node:");
    scanf("%d",&pos);
    
   
        if(pos<=len){
      
    temp=(struct node*)malloc(sizeof(struct node));
    
    printf("Enter the value to Insert:");
    
    scanf("%d",&temp->data);
    temp->link=NULL;
    
     if(pos==1){
        temp->link=root;
        root=temp;
        
    }else{
    
     int i=1;
     while(i<pos-1){
         p=p->link;
         i++;
     }
        temp->link=p->link;
        p->link=temp;
    }
 }
}

 void deletes(){
    int loc,len;
    printf("Enter the location to delete :");
    scanf("%d",&loc);
    len=length();
    if(loc>len){
        printf("Exeed the length of list:");
        
    }
    
    else{
        
        if(loc==1){
            struct node *temp;
            temp=root;
            root=temp->link;
            temp->link=NULL;
            
        }
        else{
            struct node*p;
            struct node *q;
            p=root;
            
            int i=1;
            while(i<loc-1){
                p=p->link;
                i++;
            }
            q=p->link;
            p->link=q->link;
            q->link=NULL;
        
    }
    
    
}
    
 }
 
    
void deleteval(){
    
    int val;
    printf("Enter the value to delete");
    scanf("%d",&val);
    struct node*temp;
    temp=root;
    struct node*prev;
    prev=NULL;
   
    while(temp!=NULL){
        if(temp->data==val){
            if(prev==NULL){
                
                root=temp->link;
                temp->link=NULL;
              
                
            }
            else{
                prev->link=temp->link;
                temp->link=NULL;
            }
            
        }
        prev=temp;
        temp=temp->link;
       
    }
    
    
}   

void duplicatelist(){
    struct node *curr=root;
    struct node * temp;
    
    while(curr!=NULL&&curr->link!=NULL){
        if(curr->data==curr->link->data){
            temp=curr->link;
            curr->link=temp->link;
            temp->link=NULL;
        }
    if(curr->data!=curr->link->data){
        curr=curr->link;
    }
    
    
    
}
    
}

void reverse(){
    struct node *prev,*current,*next;
    prev=NULL;
    current=root;
    next=root;
    
    while(next!=NULL){
        
        next=next->link;
        current->link=prev;
        prev=current;
      
        current=next;
       
        
        
    }
    root=prev;
    
    display();
    
}


int main()
{
    
    int ch,len;
  while(1){
      
      printf("\nEnter the choice:\n");
      scanf("%d",&ch);
      
     switch(ch){
         
         case 1: append();
                break;
         case 2: display();
                break;
         case 3: len=length();
                 printf("Lenght of the linked list is %d",len);
                 break;
         case 4: appendatpos();
                 break;
         case 5:deletes();
                break;
         case 6: deleteval();
                 break;
         case 7: duplicatelist();
                 break;
        case 8:  reverse();
                 break;
        
                 
         default: printf("You Entered a wrong choice:\n");        
         
     }
  }

    return 0;
}

